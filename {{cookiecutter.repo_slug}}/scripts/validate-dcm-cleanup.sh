#!/bin/bash
# Quick validation script to check if DCM is completely removed
# Generated by data-eng-template

set -euo pipefail

echo "üîç DCM Cleanup Validation"
echo "========================"
echo

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

validation_passed=true
issues=()

echo "üìã Checking DCM command availability..."
for cmd in dcm dcm-setup dcm-cache; do
    if command_exists "$cmd"; then
        echo "   ‚ùå $cmd is still available"
        issues+=("Command $cmd still available")
        validation_passed=false
    else
        echo "   ‚úÖ $cmd successfully removed"
    fi
done

echo
echo "üìã Checking Docker resources..."

# Check DCM containers
dcm_containers=$(docker ps -aq --filter "label=devcontainer-service-manager" 2>/dev/null | wc -l)
if [ "$dcm_containers" -eq 0 ]; then
    echo "   ‚úÖ No DCM containers found"
else
    echo "   ‚ùå $dcm_containers DCM containers still present:"
    docker ps -a --filter "label=devcontainer-service-manager" --format "     {{.Names}} ({{.Status}})"
    issues+=("$dcm_containers DCM containers remain")
    validation_passed=false
fi

# Check DCM images
dcm_images=$(docker images -q --filter "label=devcontainer-service-manager" 2>/dev/null | wc -l)
if [ "$dcm_images" -eq 0 ]; then
    echo "   ‚úÖ No DCM images found"
else
    echo "   ‚ùå $dcm_images DCM images still present:"
    docker images --filter "label=devcontainer-service-manager" --format "     {{.Repository}}:{{.Tag}}"
    issues+=("$dcm_images DCM images remain")
    validation_passed=false
fi

# Check cache registry
cache_containers=$(docker ps -aq --filter "name=dcm-cache-registry" 2>/dev/null | wc -l)
if [ "$cache_containers" -eq 0 ]; then
    echo "   ‚úÖ No cache registry containers found"
else
    echo "   ‚ùå $cache_containers cache registry containers still present"
    docker ps -a --filter "name=dcm-cache-registry" --format "     {{.Names}} ({{.Status}})"
    issues+=("$cache_containers cache registry containers remain")
    validation_passed=false
fi

# Check DCM volumes
dcm_volumes=$(docker volume ls -q --filter "label=devcontainer-service-manager" 2>/dev/null | wc -l)
if [ "$dcm_volumes" -eq 0 ]; then
    echo "   ‚úÖ No DCM volumes found"
else
    echo "   ‚ùå $dcm_volumes DCM volumes still present"
    docker volume ls --filter "label=devcontainer-service-manager" --format "     {{.Name}}"
    issues+=("$dcm_volumes DCM volumes remain")
    validation_passed=false
fi

echo
echo "üìã Checking configuration directories..."
config_dirs=(
    "$HOME/.config/devcontainer-service-manager"
    "$HOME/.devcontainer-service-manager" 
    "$HOME/.dcm"
    "$HOME/.cache/devcontainer-service-manager"
)

config_issues=0
for config_dir in "${config_dirs[@]}"; do
    if [ -d "$config_dir" ]; then
        echo "   ‚ùå Config directory still exists: $config_dir"
        issues+=("Config directory remains: $config_dir")
        validation_passed=false
        config_issues=$((config_issues + 1))
    fi
done

if [ $config_issues -eq 0 ]; then
    echo "   ‚úÖ No DCM config directories found"
fi

echo
echo "========================"
if [ "$validation_passed" = true ]; then
    echo "üéâ Validation PASSED"
    echo "‚úÖ DCM appears to be completely removed"
    echo "‚úÖ System is ready for fresh installation"
else
    echo "‚ùå Validation FAILED"
    echo "Issues found:"
    for issue in "${issues[@]}"; do
        echo "   ‚Ä¢ $issue"
    done
    echo
    echo "üí° Suggested actions:"
    echo "   ‚Ä¢ Run: ./scripts/uninstall-dcm.sh"
    echo "   ‚Ä¢ Or manually clean up remaining resources"
    echo "   ‚Ä¢ Try: docker system prune -a --volumes"
fi

echo
echo "üìä Summary:"
echo "   DCM containers: $dcm_containers"
echo "   DCM images: $dcm_images" 
echo "   Cache containers: $cache_containers"
echo "   DCM volumes: $dcm_volumes"
echo "   Config directories: $config_issues"