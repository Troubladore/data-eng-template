#!/bin/bash
# Comprehensive DCM (devcontainer-service-manager) uninstall script
# Generated by data-eng-template - ensures complete removal of DCM and related services

set -euo pipefail

echo "🗑️  Comprehensive DCM Uninstall Script"
echo "======================================"
echo
echo "This script will:"
echo "  1. Stop all running DCM services"
echo "  2. Clean up Docker containers, images, and volumes"
echo "  3. Remove DCM cache registry"
echo "  4. Uninstall DCM packages"
echo "  5. Clean up configuration files"
echo "  6. Validate complete removal"
echo

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to ask for confirmation
confirm() {
    local message="$1"
    echo -n "$message (y/N): "
    read -r response
    case "$response" in
        [yY][eE][sS]|[yY]) 
            return 0
            ;;
        *)
            echo "❌ Operation cancelled by user"
            exit 1
            ;;
    esac
}

# Show what will be cleaned up
echo "🔍 Scanning for DCM resources..."
echo

# Check if DCM is installed
if command_exists dcm; then
    echo "📋 DCM Services Status:"
    dcm status 2>/dev/null || echo "   No DCM services running"
    echo
fi

if command_exists dcm-cache; then
    echo "📋 DCM Cache Status:"
    dcm-cache status 2>/dev/null || echo "   No DCM cache registry found"
    echo
fi

# Show Docker resources that will be affected
echo "📋 Docker Resources (DCM-related):"
echo "   Containers:"
docker ps -a --filter "label=devcontainer-service-manager" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" 2>/dev/null || echo "     None found"

echo "   Images:"
docker images --filter "label=devcontainer-service-manager" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" 2>/dev/null || echo "     None found"

echo "   Cache registry containers:"
docker ps -a --filter "name=dcm-cache-registry" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" 2>/dev/null || echo "     None found"

echo "   Volumes:"
docker volume ls --filter "label=devcontainer-service-manager" --format "table {{.Name}}\t{{.Size}}" 2>/dev/null || echo "     None found"

echo "   Networks:"
docker network ls --filter "label=devcontainer-service-manager" --format "table {{.Name}}\t{{.Driver}}" 2>/dev/null || echo "     None found"
echo

# Confirm before proceeding
confirm "⚠️  Proceed with complete DCM uninstall?"

echo
echo "🚀 Starting DCM uninstall process..."
echo

# Step 1: Stop all DCM services
echo "1️⃣  Stopping DCM services..."
if command_exists dcm; then
    # Get all namespaces and stop them
    echo "   Stopping all DCM namespaces..."
    dcm status --format json 2>/dev/null | jq -r '.[].namespace' | sort -u | while read -r namespace; do
        if [ -n "$namespace" ] && [ "$namespace" != "null" ]; then
            echo "     Stopping namespace: $namespace"
            dcm down --namespace "$namespace" --force 2>/dev/null || echo "       Failed to stop $namespace (may already be stopped)"
        fi
    done 2>/dev/null || echo "   No active namespaces found"
    
    # Force clean all DCM resources
    echo "   Force cleaning all DCM resources..."
    dcm clean --force 2>/dev/null || echo "   No DCM resources to clean"
else
    echo "   DCM command not found - skipping service shutdown"
fi

# Step 2: Clean up project-specific cache
echo
echo "2️⃣  Cleaning project-specific cache..."
if command_exists dcm-cache; then
    echo "   Cleaning cache for {{cookiecutter.repo_slug}}..."
    dcm-cache cleanup "{{cookiecutter.repo_slug}}" --timeout 60 2>/dev/null || echo "   No project cache found"
    
    echo "   Cleaning general DCM cache..."
    dcm-cache clean --force 2>/dev/null || echo "   No general cache to clean"
else
    echo "   dcm-cache command not found - skipping cache cleanup"
fi

# Step 3: Stop and remove cache registry
echo
echo "3️⃣  Removing DCM cache registry..."
echo "   Stopping cache registry containers..."
docker stop dcm-cache-registry 2>/dev/null || echo "     Cache registry not running"
docker rm dcm-cache-registry 2>/dev/null || echo "     Cache registry container not found"

# Remove registry volumes
echo "   Removing cache registry volumes..."
docker volume rm dcm-cache-registry-data 2>/dev/null || echo "     Registry data volume not found"

# Step 4: Clean up Docker resources
echo
echo "4️⃣  Cleaning Docker resources..."

echo "   Stopping DCM-labeled containers..."
docker ps -q --filter "label=devcontainer-service-manager" | xargs -r docker stop 2>/dev/null || echo "     No running DCM containers"

echo "   Removing DCM-labeled containers..."
docker ps -aq --filter "label=devcontainer-service-manager" | xargs -r docker rm -f 2>/dev/null || echo "     No DCM containers to remove"

echo "   Removing DCM-labeled images..."
docker images -q --filter "label=devcontainer-service-manager" | xargs -r docker rmi -f 2>/dev/null || echo "     No DCM images to remove"

echo "   Removing DCM-labeled volumes..."
docker volume ls -q --filter "label=devcontainer-service-manager" | xargs -r docker volume rm 2>/dev/null || echo "     No DCM volumes to remove"

echo "   Removing DCM-labeled networks..."
docker network ls -q --filter "label=devcontainer-service-manager" | xargs -r docker network rm 2>/dev/null || echo "     No DCM networks to remove"

# Clean up any remaining DCM-related Docker resources by name pattern
echo "   Cleaning DCM-named resources..."
docker ps -aq --filter "name=dcm-" | xargs -r docker rm -f 2>/dev/null || echo "     No DCM-named containers"
docker images -q --filter "reference=*dcm*" | xargs -r docker rmi -f 2>/dev/null || echo "     No DCM-named images"

# Step 5: General Docker cleanup for good measure
echo "   Running general Docker cleanup..."
if command_exists dcm-setup; then
    dcm-setup cleanup 2>/dev/null || echo "     DCM cleanup command failed"
fi

docker system prune -f --volumes 2>/dev/null || echo "     Docker system prune failed"

# Step 6: Uninstall DCM packages
echo
echo "5️⃣  Uninstalling DCM packages..."

# Try pipx first (most common installation method)
if command_exists pipx; then
    echo "   Uninstalling via pipx..."
    pipx uninstall devcontainer-service-manager 2>/dev/null && echo "     ✅ Removed via pipx" || echo "     Not installed via pipx"
fi

# Try uv
if command_exists uv; then
    echo "   Uninstalling via uv..."
    uv pip uninstall devcontainer-service-manager --system 2>/dev/null && echo "     ✅ Removed via uv" || echo "     Not installed via uv"
fi

# Try regular pip
if command_exists pip; then
    echo "   Uninstalling via pip..."
    pip uninstall devcontainer-service-manager -y 2>/dev/null && echo "     ✅ Removed via pip" || echo "     Not installed via pip"
fi

# Try pip3
if command_exists pip3; then
    echo "   Uninstalling via pip3..."
    pip3 uninstall devcontainer-service-manager -y 2>/dev/null && echo "     ✅ Removed via pip3" || echo "     Not installed via pip3"
fi

# Step 7: Clean up configuration files and directories
echo
echo "6️⃣  Cleaning configuration files..."

# Common config locations
config_dirs=(
    "$HOME/.config/devcontainer-service-manager"
    "$HOME/.devcontainer-service-manager"
    "$HOME/.dcm"
    "/tmp/dcm-*"
    "$HOME/.cache/devcontainer-service-manager"
)

for config_dir in "${config_dirs[@]}"; do
    if [[ "$config_dir" == *"*"* ]]; then
        # Handle wildcard patterns
        for dir in $config_dir; do
            if [ -d "$dir" ]; then
                echo "   Removing config directory: $dir"
                rm -rf "$dir"
            fi
        done
    else
        if [ -d "$config_dir" ]; then
            echo "   Removing config directory: $config_dir"
            rm -rf "$config_dir"
        fi
    fi
done

# Remove any DCM-related environment variables from shell configs
echo "   Cleaning shell configuration files..."
shell_configs=(
    "$HOME/.bashrc"
    "$HOME/.zshrc"
    "$HOME/.profile"
)

for shell_config in "${shell_configs[@]}"; do
    if [ -f "$shell_config" ]; then
        # Remove DCM-related environment variables
        if grep -q "DCM\|devcontainer-service-manager" "$shell_config" 2>/dev/null; then
            echo "     Cleaning DCM references from $shell_config"
            sed -i.bak '/DCM\|devcontainer-service-manager/d' "$shell_config" 2>/dev/null || true
        fi
    fi
done

# Step 8: Validation
echo
echo "7️⃣  Validating complete removal..."
echo

validation_passed=true

# Check commands are gone
echo "📋 Command availability:"
for cmd in dcm dcm-setup dcm-cache; do
    if command_exists "$cmd"; then
        echo "   ❌ $cmd is still available"
        validation_passed=false
    else
        echo "   ✅ $cmd successfully removed"
    fi
done

# Check Docker resources
echo
echo "📋 Remaining Docker resources:"
dcm_containers=$(docker ps -aq --filter "label=devcontainer-service-manager" 2>/dev/null | wc -l)
dcm_images=$(docker images -q --filter "label=devcontainer-service-manager" 2>/dev/null | wc -l)
dcm_volumes=$(docker volume ls -q --filter "label=devcontainer-service-manager" 2>/dev/null | wc -l)
dcm_networks=$(docker network ls -q --filter "label=devcontainer-service-manager" 2>/dev/null | wc -l)

if [ "$dcm_containers" -eq 0 ]; then
    echo "   ✅ No DCM containers remaining"
else
    echo "   ❌ $dcm_containers DCM containers still present"
    validation_passed=false
fi

if [ "$dcm_images" -eq 0 ]; then
    echo "   ✅ No DCM images remaining"
else
    echo "   ❌ $dcm_images DCM images still present"
    validation_passed=false
fi

if [ "$dcm_volumes" -eq 0 ]; then
    echo "   ✅ No DCM volumes remaining"
else
    echo "   ❌ $dcm_volumes DCM volumes still present"
    validation_passed=false
fi

if [ "$dcm_networks" -eq 0 ]; then
    echo "   ✅ No DCM networks remaining"
else
    echo "   ❌ $dcm_networks DCM networks still present"
    validation_passed=false
fi

# Check cache registry
cache_registry=$(docker ps -aq --filter "name=dcm-cache-registry" 2>/dev/null | wc -l)
if [ "$cache_registry" -eq 0 ]; then
    echo "   ✅ No cache registry containers remaining"
else
    echo "   ❌ $cache_registry cache registry containers still present"
    validation_passed=false
fi

echo
if [ "$validation_passed" = true ]; then
    echo "🎉 DCM Uninstall Complete!"
    echo "✅ All DCM components successfully removed"
    echo "✅ System is clean and ready for fresh DCM installation"
    echo
    echo "💡 To reinstall DCM, run:"
    echo "   pipx install devcontainer-service-manager[workstation]"
    echo "   dcm-setup install --profile data-engineering"
else
    echo "⚠️  DCM Uninstall Completed with Issues"
    echo "❌ Some components may still be present"
    echo "💡 You may need to manually remove remaining resources"
    echo "💡 Consider running: docker system prune -a --volumes"
fi

echo
echo "🔄 Next steps for clean reinstall:"
echo "1. Restart your shell: exec \$SHELL"
echo "2. Reinstall: pipx install devcontainer-service-manager[workstation]"
echo "3. Run setup: ./scripts/setup-development.sh"
echo