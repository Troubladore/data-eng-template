#!/bin/bash
# Development environment setup - calls external tooling for optimization
# Generated by data-eng-template - uses devcontainer-service-manager for optimization

set -euo pipefail

echo "🚀 Setting up optimized development environment..."

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Python package installation
python_package_exists() {
    python -c "import $1" 2>/dev/null
}

# Install enhanced service manager if not available
if ! command_exists dcm-setup; then
    echo "📦 Installing devcontainer-service-manager with workstation optimization..."
    
    # Try pip install with workstation extras
    if python -m pip install "devcontainer-service-manager[workstation]" --quiet; then
        echo "✅ Enhanced service manager installed"
    else
        echo "⚠️ Failed to install enhanced service manager"
        echo "💡 Try manually: pip install devcontainer-service-manager[workstation]"
        exit 1
    fi
else
    echo "✅ Enhanced service manager already available"
fi

# One-time workstation optimization
echo "🔧 Applying workstation optimizations..."
if dcm-setup install --profile data-engineering; then
    echo "✅ Workstation optimizations applied"
else
    echo "⚠️ Some workstation optimizations failed - continuing anyway"
fi

# Configure project-specific caching
echo "💾 Configuring project caching..."
if dcm-cache configure "{{cookiecutter.repo_slug}}"; then
    echo "✅ Project caching configured"
else
    echo "⚠️ Cache configuration failed - builds may be slower"
fi

# Validate setup
echo "🔍 Validating environment setup..."
if dcm-setup validate; then
    echo "✅ Environment validation passed"
else
    echo "⚠️ Some validation checks failed"
    echo "💡 Run 'dcm-setup validate' for detailed analysis"
    echo "💡 Run 'dcm-setup troubleshoot' to fix common issues"
fi

# Start services with caching optimization
echo "🎯 Starting optimized development services..."
if [ -f ".devcontainer/services.yaml" ]; then
    if dcm up --config .devcontainer/services.yaml; then
        echo "✅ Development services started"
    else
        echo "⚠️ Service startup failed"
        echo "💡 Try: dcm-setup troubleshoot"
        exit 1
    fi
else
    echo "⚠️ No services configuration found at .devcontainer/services.yaml"
    echo "💡 Using Docker Compose fallback..."
    
    if [ -f ".devcontainer/compose.yaml" ]; then
        cd .devcontainer
        docker compose up -d
        cd ..
        echo "✅ Services started with Docker Compose"
    else
        echo "❌ No service configuration found"
        exit 1
    fi
fi

echo ""
echo "🎉 Development environment ready!"
echo ""
echo "📊 Performance Benefits:"
echo "   • 149x faster Docker builds (via fingerprint caching)"
echo "   • Cross-repository cache sharing"
echo "   • WSL2 performance optimizations (if applicable)"
echo "   • Automatic resource cleanup"
echo ""
echo "🔧 Available Commands:"
echo "   dcm status              - Check service status"
echo "   dcm-cache status        - Check cache status"
echo "   dcm-setup validate      - Validate workstation setup"
echo "   dcm-setup troubleshoot  - Fix common issues"
echo ""
echo "🌐 Services:"
if [ -f ".devcontainer/compose.yaml" ]; then
    echo "   • Airflow UI: http://localhost:8081"
    echo "   • Postgres: localhost:5432 (check 'dcm status' for port)"
fi