x-airflow-env: &airflow-env
  AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR:-LocalExecutor}
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  # AIRFLOW__WEBSERVER__RBAC: "True"
  AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES:-False}
  # Default "-" prevents compose "not set" warnings; real value will come from ../.env
  AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-}
  _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-postgres psycopg2-binary"

services:
  postgres:
    image: docker.io/library/postgres:${POSTGRES_VERSION:-15}
    env_file: [./postgres.env]
    volumes:
      - pg_data:/var/lib/postgresql/data
    # Publish to a free host port by default; override via PGHOSTPORT in .env if desired
    ports:
      - target: 5432
        published: ${PGHOSTPORT:-0}
        protocol: tcp
        mode: host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    image: docker.io/apache/airflow:${AIRFLOW_VERSION:-2.9.3}-python3.12
    env_file: [./airflow.env, ../.env]
    environment: *airflow-env
    user: "50000:0"
    volumes:
      - ../dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
    command: [
      "bash", "-c",
      "airflow db upgrade && airflow users create --username $$_AIRFLOW_WWW_USER_USERNAME --password $$_AIRFLOW_WWW_USER_PASSWORD --firstname Admin --lastname User --role Admin --email admin@example.com || true"
    ]
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    image: docker.io/apache/airflow:${AIRFLOW_VERSION:-2.9.3}-python3.12
    env_file: [./airflow.env, ../.env]
    environment: *airflow-env
    user: "50000:0"
    command: ["airflow", "scheduler"]
    volumes:
      - ../dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-webserver:
    image: docker.io/apache/airflow:${AIRFLOW_VERSION:-2.9.3}-python3.12
    env_file: [./airflow.env, ../.env]
    environment: *airflow-env
    user: "50000:0"
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080"
    volumes:
      - ../dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Interactive dev service (what VS Code opens into)
  dev:
    image: docker.io/library/python:${PYTHON_VERSION:-3.12}-slim
    command: sleep infinity
    # Ensure the dev service *runs* as the same non-root user VS Code connects as
    user: "${REMOTE_USER:-vscode}"
    init: true
    volumes:
      - ..:/workspaces/${COMPOSE_PROJECT_NAME}
    working_dir: /workspaces/${COMPOSE_PROJECT_NAME}
    depends_on:
      - airflow-webserver
      - airflow-scheduler
      - postgres

volumes:
  pg_data:
