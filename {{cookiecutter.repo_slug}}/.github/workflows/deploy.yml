name: 🚀 Airflow Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: airflow-{{cookiecutter.repo_slug}}

jobs:
  # Detect what changed to determine deployment strategy
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      strategy: {% raw %}${{ steps.detect.outputs.strategy }}{% endraw %}
      changed-files: {% raw %}${{ steps.detect.outputs.changed-files }}{% endraw %}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '{{cookiecutter.python_version}}'
      
      - name: Install dependencies
        run: |
          pip install pyyaml
          
      - name: Detect changes and determine strategy
        id: detect
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
          echo "changed-files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          # Determine deployment strategy based on changed files
          STRATEGY="dags-only"  # Default to fastest
          
          # Check for dependency changes (force full rebuild)
          if echo "$CHANGED_FILES" | grep -E "(pyproject\.toml|uv\.lock|requirements\.txt|Dockerfile\.airflow)"; then
            STRATEGY="full"
          # Check for code changes (need image rebuild)
          elif echo "$CHANGED_FILES" | grep -E "(transforms/|airflow/plugins/|conf/)"; then
            STRATEGY="image-and-dags"
          # Check for DAG-only changes
          elif echo "$CHANGED_FILES" | grep -E "^dags/" && ! echo "$CHANGED_FILES" | grep -vE "^dags/"; then
            STRATEGY="dags-only"
          # Mixed changes default to full for safety
          else
            STRATEGY="image-and-dags"
          fi
          
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo "🔍 Detected strategy: $STRATEGY"
          echo "📁 Changed files: $CHANGED_FILES"

  # Build and cache Docker image (only if needed)
  build-image:
    name: 🐳 Build Image  
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.strategy != 'dags-only'
    outputs:
      image-tag: {% raw %}${{ steps.image.outputs.tag }}{% endraw %}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: {% raw %}${{ env.REGISTRY }}{% endraw %}
          username: {% raw %}${{ github.actor }}{% endraw %}
          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: {% raw %}${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}{% endraw %}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=main-
            type=raw,value=latest,enable=true
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.airflow
          target: runtime
          push: true
          tags: {% raw %}${{ steps.meta.outputs.tags }}{% endraw %}
          labels: {% raw %}${{ steps.meta.outputs.labels }}{% endraw %}
          cache-from: |
            type=gha
            type=registry,ref={% raw %}${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}{% endraw %}:cache
          cache-to: |
            type=gha,mode=max
            type=registry,ref={% raw %}${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}{% endraw %}:cache,mode=max
          build-args: |
            AIRFLOW_VERSION={{cookiecutter.airflow_version}}
            PYTHON_VERSION={{cookiecutter.python_version}}
            BUILD_ENV=ci
      
      - name: Set image output
        id: image
        run: |
          # Extract the first tag for deployment
          TAG=$(echo "{% raw %}${{ steps.meta.outputs.tags }}{% endraw %}" | head -n1)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "🐳 Built image: $TAG"

  # Deploy to development environment
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-changes, build-image]
    if: always() && (needs.build-image.result == 'success' || needs.build-image.result == 'skipped')
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '{{cookiecutter.python_version}}'
      
      - name: Install deployment dependencies
        run: |
          pip install hydra-core omegaconf
      
      - name: Deploy with detected strategy
        env:
          STRATEGY: {% raw %}${{ needs.detect-changes.outputs.strategy }}{% endraw %}
          IMAGE_TAG: {% raw %}${{ needs.build-image.outputs.image-tag }}{% endraw %}
        run: |
          echo "🚀 Deploying with strategy: $STRATEGY"
          
          # Simulate deployment (replace with actual deployment logic)
          case $STRATEGY in
            "dags-only")
              echo "⚡ DAG-only deployment (fastest)"
              python scripts/deploy.py --dags-only --dry-run
              ;;
            "image-and-dags")
              echo "🔄 Image and DAG deployment"
              python scripts/deploy.py --full --dry-run
              ;;
            "full")
              echo "🔧 Full deployment with dependencies"
              python scripts/deploy.py --full --dry-run
              ;;
          esac
      
      - name: Run health checks
        run: |
          echo "🏥 Running post-deployment health checks"
          # Add actual health check commands here
          echo "✅ Health checks passed"
      
      - name: Report deployment metrics
        run: |
          echo "📊 Deployment Metrics:"
          echo "Strategy: {% raw %}${{ needs.detect-changes.outputs.strategy }}{% endraw %}"
          echo "Changed files: {% raw %}${{ needs.detect-changes.outputs.changed-files }}{% endraw %}"
          echo "Image: {% raw %}${{ needs.build-image.outputs.image-tag }}{% endraw %}"

  # Deploy to production (only on main branch)
  deploy-prod:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-changes, build-image, deploy-dev]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '{{cookiecutter.python_version}}'
      
      - name: Install deployment dependencies
        run: |
          pip install hydra-core omegaconf
      
      - name: Deploy to production (always full deployment)
        env:
          IMAGE_TAG: {% raw %}${{ needs.build-image.outputs.image-tag }}{% endraw %}
        run: |
          echo "🚀 Production deployment (always full for safety)"
          # Production always uses full deployment for safety
          python scripts/deploy.py --config prod --full --dry-run
      
      - name: Run production health checks
        run: |
          echo "🏥 Running production health checks"
          # Add comprehensive production health checks
          echo "✅ Production health checks passed"
      
      - name: Notify deployment success
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "📊 Production Deployment Summary:"
          echo "Image: {% raw %}${{ needs.build-image.outputs.image-tag }}{% endraw %}"
          echo "Strategy: full (production safety)"

  # Performance monitoring
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '{{cookiecutter.python_version}}'
      
      - name: Install dependencies
        run: |
          pip install hydra-core omegaconf
      
      - name: Run deployment performance tests
        run: |
          echo "⚡ Testing deployment performance"
          
          echo "🔍 Testing change detection..."
          time python scripts/deploy.py --detect-changes --dry-run
          
          echo "📦 Testing DAG-only deployment..."
          time python scripts/deploy.py --dags-only --dry-run
          
          echo "🐳 Testing full deployment..."
          time python scripts/deploy.py --full --dry-run
          
          echo "✅ Performance tests completed"

  # Security scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build-image]
    if: needs.build-image.outputs.image-tag != ''
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: {% raw %}${{ needs.build-image.outputs.image-tag }}{% endraw %}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'